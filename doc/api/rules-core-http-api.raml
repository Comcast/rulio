#%RAML 0.8

#% Generated by rulesapi

title: Rules System Core (Primitive) API
protocols: [ HTTP ]
version: 0.0.7
mediaType: application/json
documentation:
  - title: Overview
    content: |
      <!--
      
      Copyright 2015 Comcast Cable Communications Management, LLC
      
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
      
        http://www.apache.org/licenses/LICENSE-2.0
      
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
      
      End Copyright -->
      
      
      This API is a simple HTTP rendering of the primtive API, which can be
      packaged up as a REST API, [0MQ](http://zeromq.org/) API, Web sockets
      API, etc.
      
      This documentation was generated by `rulesapi/rulesapi`.
      
/version:
  post:
    description: |
      Report the version of the endpoint
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/version"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "go": "go1.5.1",
                "version": "0.0.9"
              }
/sys/util/nowsecs:
  post:
    description: |
      Report the time that the endpoint thinks it is
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/util/nowsecs"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "secs": 1.449177701e+09
              }
/sys/util/match:
  post:
    description: |
      Match a fact against a pattern
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "pattern": {"type":"string","description":"A pattern in JSON"},
              "fact": {"type":"string","description":"A fact in JSON"}
            }
          }
        example: |
          {
            "fact": {
              "kids": [
                "bart",
                "lisa"
              ],
              "person": "homer"
            },
            "pattern": {
              "kids": [
                "?kid"
              ],
              "person": "homer"
            },
            "uri": "/sys/util/match"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "?kid": "lisa"
                },
                {
                  "?kid": "bart"
                }
              ]
/sys/util/js:
  post:
    description: |
      Evaluate some in-process Javascript
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "code": {"type":"string","description":"The Javascript"}
            }
          }
        example: |
          {
            "code": "1+2",
            "uri": "/sys/util/js"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "result": 3
              }
/sys/util/batch:
  post:
    description: |
      Evaluate a batch of requests
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "requests": {"type":"string","description":"Array of requests, each of which should have a 'uri'"}
            }
          }
        example: |
          {
            "requests": [
              {
                "uri": "/sys/util/nowsecs"
              },
              {
                "code": "1+2",
                "uri": "/sys/util/js"
              }
            ],
            "uri": "/sys/util/batch"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "secs": 1.449177701e+09
                },
                {
                  "result": 3
                }
              ]
/sys/cachedlocations:
  post:
    description: |
      Get all cached locations
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/cachedlocations"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "locations": []
              }
/loc/admin/size:
  post:
    description: |
      Gets the number of facts (including rules) in the location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"}
            }
          }
        example: |
          {
            "location": "here",
            "uri": "/loc/admin/size"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "size": 0
              }
/loc/facts/add:
  post:
    description: |
      Add a fact to the given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "fact": {"type":"string","description":"The fact in JSON"}
            }
          }
        example: |
          {
            "fact": {
              "likes": "beer",
              "person": "homer"
            },
            "location": "here",
            "uri": "/loc/facts/add"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "id": "698c16b6-aff3-4f3d-bee8-f00ffbf9236f"
              }
/loc/facts/search:
  post:
    description: |
      Search (internal) facts at given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "fact": {"type":"string","description":"The fact in JSON"}
            }
          }
        example: |
          {
            "location": "here",
            "pattern": {
              "likes": "?what",
              "person": "?who"
            },
            "uri": "/loc/facts/search"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "Checked": 1,
                "Elapsed": 1.836546e+06,
                "Expired": 0,
                "Found": [
                  {
                    "Bindingss": [
                      {
                        "?what": "beer",
                        "?who": "homer"
                      }
                    ],
                    "Id": "698c16b6-aff3-4f3d-bee8-f00ffbf9236f",
                    "Js": "{\\"likes\\":\\"beer\\",\\"person\\":\\"homer\\"}"
                  }
                ]
              }
/loc/facts/query:
  post:
    description: |
      Query facts at given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "query": {"type":"string","description":"The query (as in a rule condition) in JSON"}
            }
          }
        example: |
          {
            "location": "here",
            "query": {
              "and": [
                {
                  "pattern": {
                    "likes": "?what",
                    "person": "?who"
                  }
                },
                {
                  "code": "what.length \u003e 2"
                }
              ]
            },
            "uri": "/loc/facts/query"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "Bss": [
                  {
                    "?what": "beer",
                    "?who": "homer"
                  }
                ],
                "Checked": 0,
                "Elapsed": 1.3694502e+07
              }
/loc/rules/add:
  post:
    description: |
      Add a new rule to the given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "id": {"type":"string","description":"Optional id"},
              "rule": {"type":"string","description":"The rule in JSON"},
              "location": {"type":"string","description":"The target location"}
            }
          }
        example: |
          {
            "id": "rule42",
            "location": "here",
            "rule": {
              "action": {
                "code": "console.log(\\"Deliver some \\" + what + \\" to \\" + there);"
              },
              "condition": {
                "pattern": {
                  "likes": "?what",
                  "person": "?who"
                }
              },
              "when": {
                "pattern": {
                  "arrived": "?there",
                  "person": "?who"
                }
              }
            },
            "uri": "/loc/rules/add"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "id": "rule42"
              }
/loc/rules/list:
  post:
    description: |
      Get the known rules
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"}
            }
          }
        example: |
          {
            "location": "here",
            "uri": "/loc/rules/list"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "ids": [
                  "rule42"
                ]
              }
/loc/events/ingest:
  post:
    description: |
      Submit an event for processing
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "event": {"type":"string","description":"The event in JSON"},
              "externalFactsTimeout": {"type":"string","description":"Optional timeout; syntax is from 'http://golang.org/pkg/time/#ParseDuration'"}
            }
          }
        example: |
          {
            "event": {
              "arrived": "home",
              "person": "homer"
            },
            "location": "here",
            "uri": "/loc/events/ingest"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "id": "095b25cd-3b76-4017-898a-45fd7d632bca",
                "result": {
                  "children": [
                    {
                      "DoneWork": {
                        "disposition": {
                          "msg": "complete",
                          "status": "complete"
                        }
                      },
                      "bindingss": [
                        {
                          "?there": "home",
                          "?who": "homer"
                        }
                      ],
                      "children": [
                        {
                          "bindings": {
                            "?there": "home",
                            "?who": "homer"
                          },
                          "children": [
                            {
                              "action": {
                                "code": "console.log(\\"Deliver some \\" + what + \\" to \\" + there);",
                                "endpoint": "javascript",
                                "subvars": true
                              },
                              "bindings": {
                                "?event": {
                                  "arrived": "home",
                                  "person": "homer"
                                },
                                "?location": "here",
                                "?ruleId": "rule42",
                                "?there": "home",
                                "?what": "beer",
                                "?who": "homer"
                              },
                              "disposition": {
                                "msg": "complete",
                                "status": "complete"
                              }
                            }
                          ],
                          "disposition": {
                            "msg": "complete",
                            "status": "complete"
                          }
                        }
                      ],
                      "disposition": {
                        "msg": "complete",
                        "status": "complete"
                      },
                      "rule": {
                        "actions": [
                          {
                            "code": "console.log(\\"Deliver some \\" + what + \\" to \\" + there);",
                            "endpoint": "javascript",
                            "subvars": true
                          }
                        ],
                        "condition": {
                          "pattern": {
                            "likes": "?what",
                            "person": "?who"
                          }
                        },
                        "expires": 0,
                        "id": "rule42",
                        "once": false,
                        "props": null,
                        "when": {
                          "pattern": {
                            "arrived": "?there",
                            "person": "?who"
                          }
                        }
                      }
                    }
                  ],
                  "disposition": {
                    "msg": "complete",
                    "status": "complete"
                  },
                  "event": {
                    "arrived": "home",
                    "person": "homer"
                  },
                  "values": [
                    null
                  ]
                }
              }
/loc/events/retry:
  post:
    description: |
      Retry event processing
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "work": {"type":"string","description":"The event work as returned by 'ingest'"}
            }
          }
/sys/admin/timers/names:
  post:
    description: |
      Get an array of known timers
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/admin/timers/names"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              [
                "SystemOpenLocation",
                "ExecQuery",
                "Query",
                "SystemQuery",
                "AddRule",
                "SystemListRules",
                "IndexedState.FindRules",
                "RunJavascript",
                "TermIndex",
                "IndexedState.Search",
                "SearchFacts",
                "SystemAddRule",
                "ListRules",
                "SystemSearchFacts",
                "CodeQuery.Exec",
                "ExecAction",
                "SystemProcessEvent",
                "ProcessRequest",
                "ServeHTTP",
                "IndexedState.Load",
                "AddFact",
                "SystemAddFact",
                "SearchRules"
              ]
/sys/admin/timers/get:
  post:
    description: |
      Get a timer
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "name": {"type":"string","description":"Timer name"},
              "after": {"type":"string","description":"Optional seq integer (defaults to -1)"},
              "limit": {"type":"string","description":"Optional max number to return"}
            }
          }
        example: |
          {
            "limit": 3,
            "name": "ProcessRequest",
            "uri": "/sys/admin/timers/get"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "Elapsed": 7.732218e+06,
                  "Seq": 13,
                  "Timestamp": "2015-12-03T21:21:41.450Z"
                },
                {
                  "Elapsed": 1.7263101e+07,
                  "Seq": 14,
                  "Timestamp": "2015-12-03T21:21:41.470Z"
                },
                {
                  "Elapsed": 165424,
                  "Seq": 15,
                  "Timestamp": "2015-12-03T21:21:41.475Z"
                }
              ]
/loc/rules/disable:
  post:
    description: |
      Disable a rule
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "id": {"type":"string","description":"The rule ID as returned by a `/rules/add`"}
            }
          }
        example: |
          {
            "id": "rule42",
            "location": "here",
            "name": "ServeHTTP",
            "uri": "/loc/rules/disable"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "disabled": "rule42"
              }
/loc/rules/enable:
  post:
    description: |
      Enbale a rule
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "id": {"type":"string","description":"The rule ID as returned by a `/rules/add`"}
            }
          }
        example: |
          {
            "id": "rule42",
            "location": "here",
            "name": "ServeHTTP",
            "uri": "/loc/rules/enable"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "enabled": "rule42"
              }
/loc/rules/enabled:
  post:
    description: |
      Report whether a rule is enabled
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "id": {"type":"string","description":"The rule ID as returned by a `/rules/add`"}
            }
          }
        example: |
          {
            "id": "rule42",
            "location": "here",
            "name": "ServeHTTP",
            "uri": "/loc/rules/enabled"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "enabled": true,
                "ruleId": "rule42"
              }
/loc/rules/rem:
  post:
    description: |
      Remove a rule from the given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"},
              "id": {"type":"string","description":"The rule ID as returned by a `/rules/add`"}
            }
          }
        example: |
          {
            "id": "rule42",
            "location": "here",
            "name": "ServeHTTP",
            "uri": "/loc/rules/rem"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "given": "rule42",
                "removed": "rule42"
              }
/loc/util/js:
  post:
    description: |
      Evaluate some in-process Javascript within a location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "code": {"type":"string","description":"The Javascript to execute"}
            }
          }
        example: |
          {
            "code": "Env.Location",
            "location": "here",
            "uri": "/loc/util/js"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "result": "here"
              }
/loc/admin/create:
  post:
    description: |
      Create a location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The name of the location to create"}
            }
          }
        example: |
          {
            "location": "CreatedLocation",
            "uri": "/loc/admin/create"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "okay"
              }
/loc/admin/delete:
  post:
    description: |
      Delete a location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The name of the location to delete"}
            }
          }
        example: |
          {
            "location": "CreatedLocation",
            "uri": "/loc/admin/delete"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "okay"
              }
/loc/admin/stats:
  post:
    description: |
      Get basic stats for the given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"}
            }
          }
        example: |
          {
            "location": "here",
            "uri": "/loc/admin/stats"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "ActionExecs": 0,
                "AddFacts": 1,
                "AddRules": 1,
                "ErrorCount": 0,
                "GetEventHistorys": 0,
                "GetFacts": 0,
                "GetRules": 0,
                "ListLocations": 0,
                "ListRules": 1,
                "NewLocations": 0,
                "ProcessEvents": 0,
                "RemFacts": 0,
                "RemRules": 1,
                "SearchFacts": 4,
                "SearchRules": 1,
                "TotalCalls": 15,
                "TotalTime": 1.07336922e+08,
                "UpdateRules": 0
              }
/loc/admin/clear:
  post:
    description: |
      Clear all (internal) state at the given location
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "location": {"type":"string","description":"The target location"}
            }
          }
        example: |
          {
            "location": "here",
            "uri": "/loc/admin/clear"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "okay"
              }
/sys/runtime:
  post:
    description: |
      Get a huge pile of Go runtime stats
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/runtime"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "cgos": 1,
                "goroutines": 15,
                "goversion": "go1.5.1",
                "memstats": {
                  "Alloc": 3.214984e+06,
                  "BuckHashSys": 1.450056e+06,
                  "BySize": [
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 0
                    },
                    {
                      "Frees": 20871,
                      "Mallocs": 21078,
                      "Size": 8
                    },
                    {
                      "Frees": 72194,
                      "Mallocs": 77543,
                      "Size": 16
                    },
                    {
                      "Frees": 11016,
                      "Mallocs": 13378,
                      "Size": 32
                    },
                    {
                      "Frees": 4516,
                      "Mallocs": 5588,
                      "Size": 48
                    },
                    {
                      "Frees": 338,
                      "Mallocs": 573,
                      "Size": 64
                    },
                    {
                      "Frees": 1072,
                      "Mallocs": 1185,
                      "Size": 80
                    },
                    {
                      "Frees": 3803,
                      "Mallocs": 4333,
                      "Size": 96
                    },
                    {
                      "Frees": 1470,
                      "Mallocs": 1580,
                      "Size": 112
                    },
                    {
                      "Frees": 211,
                      "Mallocs": 232,
                      "Size": 128
                    },
                    {
                      "Frees": 1686,
                      "Mallocs": 1786,
                      "Size": 144
                    },
                    {
                      "Frees": 364,
                      "Mallocs": 414,
                      "Size": 160
                    },
                    {
                      "Frees": 1592,
                      "Mallocs": 1701,
                      "Size": 176
                    },
                    {
                      "Frees": 41,
                      "Mallocs": 48,
                      "Size": 192
                    },
                    {
                      "Frees": 285,
                      "Mallocs": 332,
                      "Size": 208
                    },
                    {
                      "Frees": 511,
                      "Mallocs": 542,
                      "Size": 224
                    },
                    {
                      "Frees": 517,
                      "Mallocs": 548,
                      "Size": 240
                    },
                    {
                      "Frees": 304,
                      "Mallocs": 316,
                      "Size": 256
                    },
                    {
                      "Frees": 2566,
                      "Mallocs": 2720,
                      "Size": 288
                    },
                    {
                      "Frees": 486,
                      "Mallocs": 540,
                      "Size": 320
                    },
                    {
                      "Frees": 1492,
                      "Mallocs": 2018,
                      "Size": 352
                    },
                    {
                      "Frees": 20,
                      "Mallocs": 56,
                      "Size": 384
                    },
                    {
                      "Frees": 60,
                      "Mallocs": 82,
                      "Size": 416
                    },
                    {
                      "Frees": 25,
                      "Mallocs": 25,
                      "Size": 448
                    },
                    {
                      "Frees": 1338,
                      "Mallocs": 1452,
                      "Size": 480
                    },
                    {
                      "Frees": 61,
                      "Mallocs": 66,
                      "Size": 512
                    },
                    {
                      "Frees": 235,
                      "Mallocs": 246,
                      "Size": 576
                    },
                    {
                      "Frees": 19,
                      "Mallocs": 25,
                      "Size": 640
                    },
                    {
                      "Frees": 66,
                      "Mallocs": 71,
                      "Size": 704
                    },
                    {
                      "Frees": 7,
                      "Mallocs": 10,
                      "Size": 768
                    },
                    {
                      "Frees": 18,
                      "Mallocs": 22,
                      "Size": 896
                    },
                    {
                      "Frees": 33,
                      "Mallocs": 38,
                      "Size": 1024
                    },
                    {
                      "Frees": 1350,
                      "Mallocs": 1482,
                      "Size": 1152
                    },
                    {
                      "Frees": 4,
                      "Mallocs": 11,
                      "Size": 1280
                    },
                    {
                      "Frees": 47,
                      "Mallocs": 57,
                      "Size": 1408
                    },
                    {
                      "Frees": 2,
                      "Mallocs": 2,
                      "Size": 1536
                    },
                    {
                      "Frees": 6,
                      "Mallocs": 16,
                      "Size": 1664
                    },
                    {
                      "Frees": 24,
                      "Mallocs": 25,
                      "Size": 2048
                    },
                    {
                      "Frees": 4,
                      "Mallocs": 9,
                      "Size": 2304
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 1,
                      "Size": 2560
                    },
                    {
                      "Frees": 15,
                      "Mallocs": 19,
                      "Size": 2816
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 3072
                    },
                    {
                      "Frees": 2,
                      "Mallocs": 9,
                      "Size": 3328
                    },
                    {
                      "Frees": 20,
                      "Mallocs": 31,
                      "Size": 4096
                    },
                    {
                      "Frees": 1,
                      "Mallocs": 7,
                      "Size": 4608
                    },
                    {
                      "Frees": 3,
                      "Mallocs": 13,
                      "Size": 5376
                    },
                    {
                      "Frees": 138,
                      "Mallocs": 158,
                      "Size": 6144
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 6400
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 2,
                      "Size": 6656
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 6912
                    },
                    {
                      "Frees": 6,
                      "Mallocs": 8,
                      "Size": 8192
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 8448
                    },
                    {
                      "Frees": 1,
                      "Mallocs": 1,
                      "Size": 8704
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 9472
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 10496
                    },
                    {
                      "Frees": 1,
                      "Mallocs": 1,
                      "Size": 12288
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 13568
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 14080
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 16384
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 0,
                      "Size": 16640
                    },
                    {
                      "Frees": 0,
                      "Mallocs": 1,
                      "Size": 17664
                    }
                  ],
                  "DebugGC": false,
                  "EnableGC": true,
                  "Frees": 128975,
                  "GCCPUFraction": 0.007981488895472691,
                  "GCSys": 207872,
                  "HeapAlloc": 3.214984e+06,
                  "HeapIdle": 1.35168e+06,
                  "HeapInuse": 4.481024e+06,
                  "HeapObjects": 11617,
                  "HeapReleased": 0,
                  "HeapSys": 5.832704e+06,
                  "LastGC": 1.4491777016882555e+18,
                  "Lookups": 16,
                  "MCacheInuse": 2416,
                  "MCacheSys": 16384,
                  "MSpanInuse": 42784,
                  "MSpanSys": 65536,
                  "Mallocs": 140592,
                  "NextGC": 4.194304e+06,
                  "NumGC": 5,
                  "OtherSys": 756912,
                  "PauseEnd": [
                    1.4491777013564964e+18,
                    1.4491777014402836e+18,
                    1.44917770150068e+18,
                    1.4491777015970885e+18,
                    1.4491777016882555e+18,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                  ],
                  "PauseNs": [
                    1.14753e+06,
                    1.581475e+06,
                    4.399755e+06,
                    1.1954379e+07,
                    1.0652185e+07,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                  ],
                  "PauseTotalNs": 2.9735324e+07,
                  "StackInuse": 458752,
                  "StackSys": 458752,
                  "Sys": 8.788216e+06,
                  "TotalAlloc": 1.6288096e+07
                }
              }
/sys/admin/pending:
  post:
    description: |
      Get or set the max number of pending requests
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "max": {"type":"string","description":"Optional new maximum"}
            }
          }
        example: |
          {
            "uri": "/sys/admin/pending"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "max": 0,
                "maxed": false,
                "pending": 1
              }
/sys/admin/connstates:
  post:
    description: |
      See the connection state counts
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/admin/connstates"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "active": 27,
                "idle": 26,
                "new": 1
              }
/sys/admin/gc:
  post:
    description: |
      Run the garbage collector
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/admin/gc"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "okay"
              }
/sys/admin/freemem:
  post:
    description: |
      Maybe return memory to the OS
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/admin/freemem"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "okay"
              }
/sys/admin/gcpercent:
  post:
    description: |
      Set the GC trigger threshold
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
              "percent": {"type":"string","description":"Percentage threshold"}
            }
          }
        example: |
          {
            "percent": "70",
            "uri": "/sys/admin/gcpercent"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "now": 70,
                "status": "okay",
                "was": 100
              }
/sys/stats:
  post:
    description: |
      Get basic system metrics
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/sys/stats"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "ActionExecs": 0,
                "AddFacts": 1,
                "AddRules": 1,
                "ErrorCount": 0,
                "GetEventHistorys": 0,
                "GetFacts": 0,
                "GetRules": 0,
                "ListLocations": 0,
                "ListRules": 1,
                "NewLocations": 2,
                "ProcessEvents": 1,
                "RemFacts": 0,
                "RemRules": 1,
                "SearchFacts": 1,
                "SearchRules": 0,
                "TotalCalls": 18,
                "TotalTime": 2.09355587e+08,
                "UpdateRules": 0
              }
/health/shallow:
  post:
    description: |
      Ping
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/health/shallow"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "good"
              }
/health/deep:
  post:
    description: |
      Somewhat deep health check
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/health/deep"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "good"
              }
/health/deeper:
  post:
    description: |
      Deeper health check, which checks storage
    body:
      application/json:
        schema: |
          {
            "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "properties": {
            }
          }
        example: |
          {
            "uri": "/health/deeper"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": "good"
              }
